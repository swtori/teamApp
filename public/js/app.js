// TeamApp V1 - Gestion des Agents
// Version ultra-simple et robuste

console.log('üöÄ TeamApp V1 - Initialisation...');

// Variables globales
let agents = [];
let currentAgentId = null;
let isEditMode = false;

// √âl√©ments DOM
let newAgentBtn, refreshBtn, searchBox, modal, closeModal, cancelBtn, form, modalTitle;
let pseudoInput, discordInput, actifCheckbox, dansLaTeamCheckbox, commentsTextarea;
let agentsContainer;

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ DOM charg√©, configuration des √©l√©ments...');
    initializeElements();
    setupEventListeners();
    // loadAgents(); // Retir√© - sera appel√© par le syst√®me d'authentification
});

// Initialisation des √©l√©ments DOM
function initializeElements() {
    console.log('üîß Initialisation des √©l√©ments DOM...');
    
    // Boutons principaux
    newAgentBtn = document.getElementById('newAgentBtn');
    refreshBtn = document.getElementById('refreshBtn');
    searchBox = document.getElementById('searchBox');
    
    // Modal
    modal = document.getElementById('agentModal');
    closeModal = document.getElementById('closeModal');
    cancelBtn = document.getElementById('cancelBtn');
    modalTitle = document.getElementById('modalTitle');
    
    // Formulaire
    form = document.getElementById('agentForm');
    pseudoInput = document.getElementById('pseudo');
    discordInput = document.getElementById('discordAgent');
    actifCheckbox = document.getElementById('actif');
    dansLaTeamCheckbox = document.getElementById('dansLaTeam');
    commentsTextarea = document.getElementById('comments');
    
    // Container des agents
    agentsContainer = document.getElementById('agents-container');
    
    console.log('‚úÖ √âl√©ments DOM initialis√©s');
}

// Configuration des √©v√©nements
function setupEventListeners() {
    console.log('üîß Configuration des √©v√©nements...');
    
    // Bouton Nouvel Agent
    if (newAgentBtn) {
        newAgentBtn.addEventListener('click', function() {
            console.log('‚ûï Bouton Nouvel Agent cliqu√©');
            openModal();
        });
        console.log('‚úÖ Bouton Nouvel Agent configur√©');
    }
    
    // Bouton Actualiser
    if (refreshBtn) {
        refreshBtn.addEventListener('click', function() {
            console.log('üîÑ Bouton Actualiser cliqu√©');
            refreshAgents();
        });
        console.log('‚úÖ Bouton Actualiser configur√©');
    }
    
    // Barre de recherche
    if (searchBox) {
        searchBox.addEventListener('input', function(e) {
            console.log('üîç Recherche:', e.target.value);
            filterAgents(e.target.value);
        });
        console.log('‚úÖ Barre de recherche configur√©e');
    }
    
    // Fermeture du modal
    if (closeModal) {
        closeModal.addEventListener('click', function() {
            console.log('üîí Fermeture du modal (X)');
            closeModalFunc();
        });
        console.log('‚úÖ Bouton fermeture modal configur√©');
    }
    
    // Bouton Annuler
    if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
            console.log('‚ùå Bouton Annuler cliqu√©');
            closeModalFunc();
        });
        console.log('‚úÖ Bouton Annuler configur√©');
    }
    
    // Formulaire
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            console.log('üìù Soumission du formulaire');
            handleFormSubmit();
        });
        console.log('‚úÖ Formulaire configur√©');
    }
    
    // Gestion automatique du champ "Actif" quand "Dans la team" change
    if (dansLaTeamCheckbox) {
        dansLaTeamCheckbox.addEventListener('change', function() {
            if (!this.checked && actifCheckbox && actifCheckbox.checked) {
                // Si on d√©coche "Dans la team" et que "Actif" est coch√©
                actifCheckbox.checked = false;
                showMessage('‚ÑπÔ∏è Note : Un agent hors de la team est automatiquement marqu√© comme inactif', 'info');
            }
        });
        console.log('‚úÖ Gestion automatique Dans la team configur√©e');
    }
    
    // Fermeture du modal en cliquant √† l'ext√©rieur
    if (modal) {
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                console.log('üîí Fermeture du modal (ext√©rieur)');
                closeModalFunc();
            }
        });
        console.log('‚úÖ Fermeture modal ext√©rieur configur√©e');
    }
    
    console.log('‚úÖ Tous les √©v√©nements configur√©s');
}

// Chargement des agents
// Fonction pour charger les agents (appel√©e par le syst√®me d'authentification)
window.loadAgents = async function loadAgents() {
    console.log('üì• Chargement des agents...');
    try {
        const response = await fetch('/api/agents');
        if (!response.ok) throw new Error('Erreur lors du chargement');
        
        const data = await response.json();
        agents = data.agents || [];
        console.log(`‚úÖ ${agents.length} agents charg√©s`);
        
        renderAgents();
    } catch (error) {
        console.error('‚ùå Erreur lors du chargement des agents:', error);
        showMessage('Erreur lors du chargement des agents', 'error');
    }
}

// Fonction pour calculer et afficher les statistiques du dashboard
function updateAgentsDashboard() {
    console.log('üìä Mise √† jour du dashboard des agents...');
    
    if (!Array.isArray(agents)) {
        console.error('‚ùå Les donn√©es des agents ne sont pas un tableau pour le dashboard');
        return;
    }
    
    // Debug: afficher un √©chantillon des donn√©es
    console.log('üîç Debug agents:', agents.slice(0, 2));
    
    // Calculer les statistiques
    const stats = {
        builders: { total: 0, active: 0 },
        devs: { total: 0, active: 0 },
        apprentis: { total: 0, active: 0 },
        team: { total: 0, active: 0 }
    };
    
    agents.forEach(agent => {
        // V√©rifier si l'agent est dans la team (pas un client)
        if (agent.dansLaTeam) {
            stats.team.total++;
            
            // V√©rifier si actif (le champ s'appelle 'actif' et non 'statut')
            const isActive = agent.actif === true;
            if (isActive) {
                stats.team.active++;
            }
            
            // Flags pour √©viter de compter plusieurs fois le m√™me agent
            let isBuilder = false;
            let isDev = false;
            let isApprenti = false;
            
            // Compter par r√¥les (le champ s'appelle 'role' et non 'roles')
            if (agent.role && Array.isArray(agent.role)) {
                agent.role.forEach(role => {
                    switch (role.toLowerCase()) {
                        case 'builder':
                            isBuilder = true;
                            break;
                        case 'dev':
                        case 'd√©veloppeur':
                        case 'developpeur':
                        case 'developer':
                            isDev = true;
                            break;
                        case 'apprenti':
                        case 'apprentice':
                            isApprenti = true;
                            break;
                    }
                });
            }
            
            // Compter chaque agent une seule fois par cat√©gorie
            if (isBuilder) {
                stats.builders.total++;
                if (isActive) stats.builders.active++;
            }
            if (isDev) {
                stats.devs.total++;
                if (isActive) stats.devs.active++;
            }
            if (isApprenti) {
                stats.apprentis.total++;
                if (isActive) stats.apprentis.active++;
            }
        }
    });
    
    // Mettre √† jour l'affichage
    const updateElement = (id, value) => {
        const element = document.getElementById(id);
        if (element) element.textContent = value;
    };
    
    updateElement('buildersTotal', stats.builders.total);
    updateElement('buildersActive', `${stats.builders.active} actifs`);
    
    updateElement('devsTotal', stats.devs.total);
    updateElement('devsActive', `${stats.devs.active} actifs`);
    
    updateElement('apprentisTotal', stats.apprentis.total);
    updateElement('apprentisActive', `${stats.apprentis.active} actifs`);
    
    updateElement('teamTotal', stats.team.total);
    updateElement('teamActive', `${stats.team.active} actifs`);
    
    console.log('‚úÖ Dashboard mis √† jour:', stats);
}

// Rendu des agents
function renderAgents() {
    console.log('üé® Rendu des agents...');
    
    if (!agentsContainer) {
        console.error('‚ùå Container des agents non trouv√©');
        return;
    }
    
    if (agents.length === 0) {
        agentsContainer.innerHTML = `
            <div class="loading">
                <i class="fas fa-users"></i> Aucun agent trouv√©
            </div>
        `;
        return;
    }
    
    // Trier les agents : dans la team en haut, hors team en bas
    const sortedAgents = [...agents].sort((a, b) => {
        // D'abord par statut "dans la team" (true en premier)
        if (a.dansLaTeam !== b.dansLaTeam) {
            return b.dansLaTeam ? 1 : -1;
        }
        // Puis par pseudo alphab√©tiquement
        return a.pseudo.localeCompare(b.pseudo);
    });
    
    // Cr√©er des sections s√©par√©es
    const inTeamAgents = sortedAgents.filter(agent => agent.dansLaTeam);
    const outTeamAgents = sortedAgents.filter(agent => !agent.dansLaTeam);
    
    let agentsHTML = '';
    
    // Section "Dans la team"
    if (inTeamAgents.length > 0) {
        agentsHTML += `
            <div class="team-section">
                <h3 class="section-title team-section-title">
                    <i class="fas fa-users"></i> Dans la team (${inTeamAgents.length})
                </h3>
                <div class="agents-grid">
                    ${inTeamAgents.map(agent => renderAgentCard(agent)).join('')}
                </div>
            </div>
        `;
    }
    
    // Section "Hors de la team"
    if (outTeamAgents.length > 0) {
        agentsHTML += `
            <div class="team-section">
                <h3 class="section-title out-team-section-title">
                    <i class="fas fa-user-times"></i> Hors de la team (${outTeamAgents.length})
                </h3>
                <div class="agents-grid">
                    ${outTeamAgents.map(agent => renderAgentCard(agent)).join('')}
                </div>
            </div>
        `;
    }
    
    agentsContainer.innerHTML = agentsHTML;
    
    // Ajouter les gestionnaires d'√©v√©nements aux boutons g√©n√©r√©s
    setupAgentCardEventListeners();
    
    // Mettre √† jour le dashboard
    updateAgentsDashboard();
    
    console.log(`‚úÖ ${agents.length} agents rendus (tri√©s par statut team)`);
}

// Configuration des √©v√©nements pour les cartes d'agents
function setupAgentCardEventListeners() {
    console.log('üîß Configuration des √©v√©nements des cartes d\'agents...');
    
    // Boutons Modifier
    const editButtons = document.querySelectorAll('.edit-agent-btn');
    editButtons.forEach(button => {
        button.addEventListener('click', function() {
            const agentId = parseInt(this.getAttribute('data-agent-id'));
            console.log('‚úèÔ∏è Bouton Modifier cliqu√© pour l\'agent:', agentId);
            editAgent(agentId);
        });
    });
    
    // Boutons Supprimer
    const deleteButtons = document.querySelectorAll('.delete-agent-btn');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const agentId = parseInt(this.getAttribute('data-agent-id'));
            console.log('üóëÔ∏è Bouton Supprimer cliqu√© pour l\'agent:', agentId);
            deleteAgent(agentId);
        });
    });
    
    console.log('‚úÖ √âv√©nements des cartes d\'agents configur√©s');
}

// Rendu d'une carte d'agent
function renderAgentCard(agent) {
    const statusClass = agent.actif ? 'active' : 'inactive';
    const statusText = agent.actif ? 'Actif' : 'Inactif';
    const statusBadgeClass = agent.actif ? 'status-active' : 'status-inactive';
    
            // Diff√©rencier les clients des agents
        const isClient = agent.role && agent.role.includes('client');
        const teamStatus = agent.dansLaTeam ? 'Dans la team' : 'Hors √©quipe';
        const teamBadgeClass = agent.dansLaTeam ? 'team-status-in' : 'team-status-out';
        
        // Style sp√©cial pour les agents hors de la team
        const cardClass = agent.dansLaTeam ? 
            `agent-card ${isClient ? 'client-card' : ''}` : 
            `agent-card ${isClient ? 'client-card' : ''} out-of-team`;
    
    const rolesHTML = agent.role && agent.role.length > 0 
        ? agent.role.map(role => {
            const roleClass = role === 'client' ? 'role-tag client' : 'role-tag';
            return `<span class="${roleClass}">${role}</span>`;
        }).join('')
        : '<span class="role-tag">Aucun r√¥le</span>';
    
    const commentsHTML = agent.comments && agent.comments.length > 0
        ? agent.comments.map(comment => `
            <div class="info-row">
                <span class="info-label">Commentaire:</span>
                <span class="info-value">${comment.texte}</span>
            </div>
        `).join('')
        : '';
    
    return `
        <div class="${cardClass}">
            <div class="agent-content">
                <div class="agent-header">
                    <div class="agent-name">${agent.pseudo}</div>
                    <div class="agent-statuses">
                        <div class="agent-status ${statusBadgeClass}">${statusText}</div>
                        <div class="team-status ${teamBadgeClass}">${teamStatus}</div>
                    </div>
                </div>
                
                <div class="agent-info">
                    <div class="info-row">
                        <span class="info-label">ID:</span>
                        <span class="info-value">#${agent.idAgent}</span>
                    </div>
                    ${agent.discordAgent ? `
                        <div class="info-row">
                            <span class="info-label">Discord:</span>
                            <span class="info-value">${agent.discordAgent}</span>
                        </div>
                    ` : ''}
                    ${commentsHTML}
                </div>
                
                <div class="agent-roles">
                    ${rolesHTML}
                </div>
            </div>
            
            <div class="agent-actions">
                <button class="btn btn-warning btn-sm edit-agent-btn" data-agent-id="${agent.idAgent}">
                    <i class="fas fa-edit"></i> Modifier
                </button>
                <button class="btn btn-danger btn-sm delete-agent-btn" data-agent-id="${agent.idAgent}">
                    <i class="fas fa-trash"></i> Supprimer
                </button>
            </div>
        </div>
    `;
}

// Ouverture du modal
function openModal(agent = null) {
    console.log('üîì Ouverture du modal, agent:', agent);
    
    if (!modal || !modalTitle) {
        console.error('‚ùå √âl√©ments du modal non trouv√©s');
        return;
    }
    
    isEditMode = !!agent;
    currentAgentId = agent ? agent.idAgent : null;
    
    modalTitle.textContent = isEditMode ? 'Modifier l\'Agent' : 'Nouvel Agent';
    modal.style.display = 'block';
    document.body.classList.add('modal-open');
    
    // Remettre le scroll de la modale au d√©but
    const modalBody = modal.querySelector('.modal-body');
    if (modalBody) {
        modalBody.scrollTop = 0;
    }
    
    if (agent) {
        populateForm(agent);
    } else {
        clearForm();
    }
    
    console.log('‚úÖ Modal ouvert');
}

// Fermeture du modal
function closeModalFunc() {
    console.log('üîí Fermeture du modal');
    
    if (modal) {
        modal.style.display = 'none';
        document.body.classList.remove('modal-open');
        clearForm();
        isEditMode = false;
        currentAgentId = null;
        console.log('‚úÖ Modal ferm√©');
    }
}

// Remplissage du formulaire
function populateForm(agent) {
    console.log('üìù === D√âBUT populateForm ===');
    console.log('  - Agent re√ßu:', agent);
    console.log('  - R√¥les de l\'agent:', agent.role);
    
    if (pseudoInput) pseudoInput.value = agent.pseudo || '';
    if (discordInput) discordInput.value = agent.discordAgent || '';
    if (actifCheckbox) actifCheckbox.checked = agent.actif !== false;
    if (dansLaTeamCheckbox) dansLaTeamCheckbox.checked = agent.dansLaTeam !== false;
    if (commentsTextarea) commentsTextarea.value = agent.comments ? agent.comments.map(c => c.texte).join('\n') : '';
    
    // R√©initialiser tous les r√¥les
    const allRoleCheckboxes = document.querySelectorAll('.role-checkbox');
    console.log('  - S√©lecteur utilis√©: .role-checkbox');
    console.log('  - Tous les checkboxes de r√¥les trouv√©s:', allRoleCheckboxes.length);
    
    if (allRoleCheckboxes.length > 0) {
        console.log('  - R√©initialisation des checkboxes:');
        allRoleCheckboxes.forEach(cb => {
            const wasChecked = cb.checked;
            cb.checked = false;
            console.log(`    - ${cb.value}: ${wasChecked ? '√©tait coch√©' : '√©tait d√©coch√©'} ‚Üí d√©coch√©`);
        });
        
        // Cocher les r√¥les existants
        if (agent.role && Array.isArray(agent.role)) {
            console.log('  - Application des r√¥les existants:');
            agent.role.forEach(role => {
                const checkbox = document.querySelector(`input[value="${role}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                    console.log(`    - ${role}: coch√© avec succ√®s`);
                } else {
                    console.log(`    - ‚ö†Ô∏è ${role}: checkbox non trouv√© !`);
                }
            });
        } else {
            console.log('  - Aucun r√¥le √† appliquer');
        }
    } else {
        console.log('  - ‚ö†Ô∏è AUCUN CHECKBOX DE R√îLE TROUV√â !');
    }
    
    console.log('üìù === FIN populateForm ===');
}

// Nettoyage du formulaire
function clearForm() {
    console.log('üßπ Nettoyage du formulaire');
    
    if (form) form.reset();
    if (commentsTextarea) commentsTextarea.value = '';
}

// Gestion de la soumission du formulaire
async function handleFormSubmit() {
    console.log('üìù Traitement du formulaire...');
    
    const formData = getFormData();
    
    if (!formData.pseudo.trim()) {
        showMessage('Le pseudo est obligatoire', 'error');
        return;
    }
    
    console.log('üìä Donn√©es du formulaire:', formData);
    await saveAgent(formData);
}

// R√©cup√©ration des donn√©es du formulaire
function getFormData() {
    console.log('üîç === D√âBUT getFormData ===');
    
    // Utiliser une classe commune pour tous les checkboxes de r√¥les
    const allRoleCheckboxes = document.querySelectorAll('.role-checkbox');
    const checkedRoleCheckboxes = document.querySelectorAll('.role-checkbox:checked');
    
    console.log('  - S√©lecteur utilis√©: .role-checkbox');
    console.log('  - Tous les checkboxes de r√¥les trouv√©s:', allRoleCheckboxes.length);
    console.log('  - Checkboxes coch√©s:', checkedRoleCheckboxes.length);
    
    // Log d√©taill√© de chaque checkbox
    if (allRoleCheckboxes.length > 0) {
        console.log('  - D√©tail des checkboxes:');
        Array.from(allRoleCheckboxes).forEach((cb, index) => {
            console.log(`    ${index + 1}. ${cb.value}: ${cb.checked ? 'COCH√â' : 'd√©coch√©'} (classe: ${cb.className})`);
        });
    } else {
        console.log('  - ‚ö†Ô∏è AUCUN CHECKBOX DE R√îLE TROUV√â !');
        console.log('  - V√©rifiez que la classe .role-checkbox est bien pr√©sente dans le HTML');
    }
    
    const roles = Array.from(checkedRoleCheckboxes).map(cb => cb.value);
    console.log('  - R√¥les s√©lectionn√©s:', roles);
    
    const formData = {
        pseudo: pseudoInput ? pseudoInput.value.trim() : '',
        discordAgent: discordInput ? discordInput.value.trim() : null,
        role: roles,
        actif: actifCheckbox ? actifCheckbox.checked : false,
        dansLaTeam: dansLaTeamCheckbox ? dansLaTeamCheckbox.checked : false,
        comments: commentsTextarea ? commentsTextarea.value.trim() : null
    };
    
    console.log('üìä Donn√©es compl√®tes du formulaire:', formData);
    console.log('üîç === FIN getFormData ===');
    return formData;
}

// Sauvegarde d'un agent
async function saveAgent(agentData) {
    console.log('üíæ Sauvegarde de l\'agent:', agentData);
    
    try {
        const url = isEditMode ? `/api/agents/${currentAgentId}` : '/api/agents';
        const method = isEditMode ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(agentData)
        });
        
        if (!response.ok) throw new Error('Erreur lors de la sauvegarde');
        
        const result = await response.json();
        showMessage(
            isEditMode ? 'Agent modifi√© avec succ√®s!' : 'Agent ajout√© avec succ√®s!', 
            'success'
        );
        
        await loadAgents();
        closeModalFunc();
        return result;
    } catch (error) {
        console.error('‚ùå Erreur lors de la sauvegarde:', error);
        showMessage('Erreur lors de la sauvegarde', 'error');
        throw error;
    }
}

// Suppression d'un agent
async function deleteAgent(agentId) {
    console.log('üóëÔ∏è Suppression de l\'agent:', agentId);
    
    if (!confirm('√ätes-vous s√ªr de vouloir supprimer cet agent ?')) return;
    
    try {
        const response = await fetch(`/api/agents/${agentId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Erreur lors de la suppression');
        
        showMessage('Agent supprim√© avec succ√®s!', 'success');
        await loadAgents();
    } catch (error) {
        console.error('‚ùå Erreur lors de la suppression:', error);
        showMessage('Erreur lors de la suppression', 'error');
    }
}

// √âdition d'un agent
function editAgent(agentId) {
    console.log('‚úèÔ∏è √âdition de l\'agent:', agentId);
    
    const agent = agents.find(a => a.idAgent === agentId);
    if (agent) {
        openModal(agent);
    } else {
        console.error('‚ùå Agent non trouv√©:', agentId);
    }
}

// Filtrage des agents
function filterAgents(searchTerm) {
    console.log('üîç Filtrage des agents:', searchTerm);
    
    if (!agentsContainer) return;
    
    const searchLower = searchTerm.toLowerCase();
    const filteredAgents = agents.filter(agent => 
        agent.pseudo.toLowerCase().includes(searchLower) ||
        (agent.discordAgent && agent.discordAgent.includes(searchLower)) ||
        (agent.role && agent.role.some(role => role.toLowerCase().includes(searchLower)))
    );
    
    if (filteredAgents.length === 0) {
        agentsContainer.innerHTML = `
            <div class="loading">
                <i class="fas fa-search"></i> Aucun agent trouv√© pour "${searchTerm}"
            </div>
        `;
        return;
    }
    
    const agentsHTML = filteredAgents.map(agent => renderAgentCard(agent)).join('');
    agentsContainer.innerHTML = `
        <div class="agents-grid">
            ${agentsHTML}
        </div>
    `;
    
    // Reconfigurer les √©v√©nements apr√®s le filtrage
    setupAgentCardEventListeners();
}

// Actualisation des agents
async function refreshAgents() {
    console.log('üîÑ Actualisation des agents...');
    await loadAgents();
    showMessage('Liste actualis√©e!', 'success');
}

// Affichage des messages
function showMessage(message, type = 'info') {
    console.log(`üí¨ Message ${type}:`, message);
    
    // Supprimer les messages existants
    const existingMessages = document.querySelectorAll('.message');
    existingMessages.forEach(msg => msg.remove());
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        ${message}
    `;
    
            const container = document.querySelector('.container');
        if (container) {
            container.insertBefore(messageDiv, container.firstChild);
            
            // Auto-suppression apr√®s 5 secondes
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.remove();
                }
            }, 5000);
        }
}

// Fonctions globales pour compatibilit√©
window.openModal = openModal;
window.closeModal = closeModal;
window.refreshAgents = refreshAgents;
window.filterAgents = filterAgents;
window.editAgent = editAgent;
window.deleteAgent = deleteAgent;

console.log('‚úÖ TeamApp V1 - Initialisation termin√©e !');
